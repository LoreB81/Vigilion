openapi: 3.0.0

info: 
  title: Vigilion API
  description: API per la web app Vigilion
  version: 1.0.0

servers:
  - url: http://localhost:8000/api/v1
    description: Localhost server

paths:
  /users/{id}:
    summary: Rappresentazione di un utente
    description: La risorsa rappresenta un utente univocamente. Ogni utente Ã¨ identificato da un id.
    get: 
      summary: Ritorna il singolo utente
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID dell'utente
      responses:
        "200":
          description: Singolo utente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"

  /userreports:
    get:
      summary: Ritorna tutte le segnalazioni di un utente
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
          description: ID dell'utente
      responses:
        "200":
          description: Lista delle segnalazioni associate all'utente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Report"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Crea una relazione tra utente e report
      requestBody:
        description: Relazione utente-report da creare
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserReport"
      responses:
        "201":
          description: Relazione creata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserReport"
        "400":
          $ref: "#/components/responses/BadRequest"

  /users:
    summary: Rappresentazione della lista di utenti
    description: In chiamata GET ritorna la lista di tutti gli utenti registrati, in POST crea un nuovo utente
    get:
      summary: Lista degli utenti
      responses:
        "200":
          description: Lista degli utenti
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      summary: Crea un nuovo utente
      requestBody:
        description: Utente da creare
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Utente creato
        "400":
          $ref: "#/components/responses/BadRequest"

  /reports:
    summary: Gestione delle segnalazioni
    description: Creazione in POST di una nuova segnalazione e restituzione in GET di tutte le segnalazioni
    post:
      summary: Creazione nuova segnalazione
      requestBody:
        description: Segnalazione da creare
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Report"
      responses:
        "201":
          description: Segnalazione creata
        "400":
          $ref: "#/components/responses/BadRequest"
    get:
      summary: Lista delle segnalazioni
      responses:
        "200":
          description: Lista delle segnalazioni
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Report"

  /reports/{id}:
    summary: Rappresentazione di una segnalazione
    description: La risorsa rappresenta una segnalazione univocamente.
    get: 
      summary: Ritorna la singola segnalazione
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID della segnalazione
      responses:
        "200":
          description: Singola segnalazione
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "404":
          $ref: "#/components/responses/NotFound"

  /authentication:
    post:
      summary: Autenticazione dell'utente
      requestBody:
        description: Credenziali per l'autenticazione
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email dell'utente
                password:
                  type: string
                  description: Password dell'utente
      responses:
        "200":
          description: Autenticazione riuscita
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Token JWT per l'autenticazione
        "401":
          description: Credenziali non valide
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Credenziali non valide

components:
  schemas:
    User:
      type: object
      required:
        - id
        - firstname
        - lastname
        - email
        - password
      properties:
        id:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        password:
          type: string
    Report:
      type: object
      required:
        - id
        - user
        - typology
        - notes
        - location
        - upvote
        - downvote
      properties:
        id:
          type: integer
        user:
          type: string
          description: ID dell'utente
        typology:
          type: string
          enum: [Furto, Aggressione, Molestia, Soggetto armato, Soggetto alterato, Altro]
        notes:
          type: string
        location:
          type: string
        upvote:
          type: integer
          description: Numero di upvote ricevuti
        downvote:
          type: integer
          description: Numero di downvote ricevuti
    UserReport:
      type: object
      required:
        - user
        - report
      properties:
        user:
          type: string
          description: ID dell'utente
        report:
          type: integer
          description: ID del report
  responses:
    NotFound:
      description: Risorsa non trovata
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Risorsa non trovata
    BadRequest:
      description: Richiesta non valida
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Parametri non validi