openapi: 3.0.0

info: 
  title: Vigilion API
  description: API per la web app Vigilion
  version: 1.0.0

servers:
  - url: http://localhost:8000/api
    description: Localhost server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
        - id
        - firstname
        - lastname
        - email
        - password
        - circoscrizione
      properties:
        id:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        password:
          type: string
    Report:
      type: object
      required:
        - user
        - typology
        - notes
        - location
        - upvote
        - downvote
        - createdtime
      properties:
        id:
          type: integer
          description: ID autogenerato della segnalazione
        user:
          type: string
          description: ID dell'utente
        typology:
          type: string
          enum: [Furto, Aggressione, Molestia, Soggetto armato, Soggetto alterato, Altro]
          description: Tipologia della segnalazione
        notes:
          type: string
          description: Descrizione della segnalazione
        location:
          type: string
          description: Posizione della segnalazione (latitudine/longitudine)
        upvote:
          type: integer
          description: Numero di upvote ricevuti
        downvote:
          type: integer
          description: Numero di downvote ricevuti
        createdtime:
          type: string
          description: Data e ora di creazione della segnalazione (formato yyyy-mm-dd HH:ii)
    Vote:
      type: object
      required:
        - user
        - report
        - voteType
      properties:
        user:
          type: string
          description: ID dell'utente
        report:
          type: integer
          description: ID della segnalazione
        voteType:
          type: string
          enum: [upvote, downvote]
          description: Tipo di voto
        createdAt:
          type: string
          format: date-time
          description: Data e ora del voto
  responses:
    NotFound:
      description: Risorsa non trovata
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Risorsa non trovata
    BadRequest:
      description: Richiesta non valida
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Parametri non validi
    Unauthorized:
      description: L'utente non è autorizzato a compiere questa azione
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Utente non autorizzato

paths:
  /authentication:
    post:
      summary: Autenticazione dell'utente
      description: Autentica l'utente e ritorna il token JWT
      responses:
        '200':
          description: Token creato
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: True se l'autenticazione è riuscita, false altrimenti
                  token:
                    type: string
                    description: Token JWT per l'autenticazione
        '401':
          $ref: '#/components/responses/Unauthorized'
      requestBody:
        description: Credenziali per l'autenticazione (email e password)
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: Email dell'utente
                password:
                  type: string
                  description: Password dell'utente

  /authentication/logout:
    post:
      summary: Logout dell'utente
      description: Effettua il logout dell'utente cancellando il cookie di autenticazione
      responses:
        '200':
          description: Logout effettuato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: True se il logout è riuscito
                  message:
                    type: string
                    description: Messaggio di conferma del Logout

  /authentication/check:
    get:
      summary: Verifica autenticazione
      description: Verifica se l'utente è autenticato controllando il cookie di autenticazione
      responses:
        '200':
          description: Stato dell'autenticazione
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:
                    type: boolean
                    description: True se l'utente è autenticato
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                        description: Email dell'utente autenticato
                      id:
                        type: string
                        description: ID dell'utente autenticato

  /users/{id}:
    summary: Rappresentazione di un utente
    description: La risorsa rappresenta un utente univocamente. Ogni utente è identificato da un id.
    get: 
      summary: Ritorna il singolo utente
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID dell'utente
      responses:
        "200":
          description: Singolo utente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"

  /districts:
    get:
      summary: Espone il file circoscrizioni.geojson alle pagine frontend
      responses:
        "200":
          description: File contenente i poligoni che rappresentano le circoscrizioni del comune di Trento
          content:
            application/geo+json:
              schema:
                type: array
        "404":
          $ref: "#/components/responses/NotFound"

  /users:
    summary: Rappresentazione della lista di utenti
    description: In chiamata GET ritorna la lista di tutti gli utenti registrati, in POST crea un nuovo utente
    get:
      summary: Lista degli utenti
      responses:
        "200":
          description: Lista degli utenti
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      summary: Crea un nuovo utente
      requestBody:
        description: Utente da creare
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Utente creato
        "400":
          $ref: "#/components/responses/BadRequest"

  /users/change-password:
    post:
      summary: Modifica la password dell'utente
      description: Modifica la password dell'utente autenticato, verificando prima la vecchia password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                  type: string
                  description: Vecchia password dell'utente
                newPassword:
                  type: string
                  description: Nuova password dell'utente
      responses:
        "200":
          description: Password modificata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: True se la modifica è riuscita
                  message:
                    type: string
                    description: Messaggio di conferma
        "400":
          description: Password non valida o non corrispondente
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Messaggio di errore
        "401":
          description: Utente non autenticato
        "500":
          description: Errore del server

  /users/change-district:
    post:
      summary: Modifica la circoscrizione dell'utente
      description: Modifica la circoscrizione dell'utente autenticato
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - district
              properties:
                district:
                  type: string
                  description: Nuova circoscrizione dell'utente
      responses:
        "200":
          description: Circoscrizione modificata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: True se la modifica è riuscita
                  message:
                    type: string
                    description: Messaggio di conferma
        "400":
          description: Circoscrizione non valida
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Messaggio di errore
        "401":
          description: Utente non autenticato
        "500":
          description: Errore del server

  /users/change-email:
    post:
      summary: Modifica l'email dell'utente
      description: Modifica l'email dell'utente autenticato, verificando prima la vecchia email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - oldEmail
                - newEmail
              properties:
                oldEmail:
                  type: string
                  description: Vecchia email dell'utente
                newEmail:
                  type: string
                  description: Nuova email dell'utente
      responses:
        "200":
          description: Email modificata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: True se la modifica è riuscita
                  message:
                    type: string
                    description: Messaggio di conferma
        "400":
          description: Email non valida o non corrispondente
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Messaggio di errore
        "401":
          description: Utente non autenticato
        "500":
          description: Errore del server

  /reports:
    summary: Gestione delle segnalazioni
    description: Creazione in POST di una nuova segnalazione e restituzione in GET di tutte le segnalazioni
    post:
      summary: Creazione nuova segnalazione
      security:
        - bearerAuth: []
      requestBody:
        description: Segnalazione da creare
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Report"
      responses:
        "201":
          description: Segnalazione creata
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          description: La segnalazione non appartiene ad alcuna circoscrizione
    get:
      summary: Lista delle segnalazioni
      responses:
        "200":
          description: Lista delle segnalazioni
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Report"

  /reports/filtered:
    post:
      summary: Filtra le segnalazioni
      description: Recupera le segnalazioni filtrate per data, circoscrizione e tipologia
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDate:
                  type: string
                  format: date
                  description: Data di inizio del periodo (YYYY-MM-DD)
                endDate:
                  type: string
                  format: date
                  description: Data di fine del periodo (YYYY-MM-DD)
                district:
                  type: string
                  description: Circoscrizione di riferimento
                typology:
                  type: string
                  enum: [Furto, Aggressione, Molestia, Soggetto armato, Soggetto alterato, Altro]
                  description: Tipologia della segnalazione
      responses:
        "200":
          description: Lista delle segnalazioni filtrate
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Report"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          description: Errore del server
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Messaggio di errore
                  details:
                    type: string
                    description: Dettagli dell'errore

  /reports/latest:
    summary: Ultime segnalazioni
    description: Recupera le ultime 5 segnalazioni ordinate per data di creazione
    get:
      summary: Ultime 5 segnalazioni
      responses:
        "200":
          description: Lista delle ultime 5 segnalazioni
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Report"
        "404":
          $ref: "#/components/responses/NotFound"

  /reports/{id}:
    summary: Rappresentazione di una segnalazione
    description: La risorsa rappresenta una segnalazione univocamente.
    get: 
      summary: Ritorna la singola segnalazione
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID della segnalazione
      responses:
        "200":
          description: Singola segnalazione
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "404":
          $ref: "#/components/responses/NotFound"

  /reports/{id}/vote:
    post:
      summary: Vota una segnalazione
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID della segnalazione
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - voteType
              properties:
                voteType:
                  type: string
                  enum: [upvote, downvote]
                  description: Tipo di voto
      responses:
        '200':
          description: Voto registrato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  upvotes:
                    type: integer
                    description: Numero di upvote
                  downvotes:
                    type: integer
                    description: Numero di downvote
                  userVote:
                    type: string
                    enum: [upvote, downvote, null]
                    description: Voto dell'utente corrente
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Segnalazione non trovata

  /reports/{id}/user-vote:
    get:
      summary: Ottieni il voto dell'utente per una segnalazione
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID della segnalazione
      responses:
        '200':
          description: Voto dell'utente
          content:
            application/json:
              schema:
                type: object
                properties:
                  voteType:
                    type: string
                    enum: [upvote, downvote, null]
                    description: Tipo di voto dell'utente
        '401':
          $ref: '#/components/responses/Unauthorized'